# Here you can define all your data sets by using simple YAML syntax.
#
# Documentation for this file format can be found in "The Data Catalog"
# Link: https://docs.kedro.org/en/stable/data/data_catalog.html
#
# We support interacting with a variety of data stores including local file systems, cloud, network and HDFS
#
# An example data set definition can look as follows:
#
#bikes:
#  type: pandas.CSVDataset
#  filepath: "data/01_raw/bikes.csv"
#
#weather:
#  type: spark.SparkDataset
#  filepath: s3a://your_bucket/data/01_raw/weather*
#  file_format: csv
#  credentials: dev_s3
#  load_args:
#    header: True
#    inferSchema: True
#  save_args:
#    sep: '|'
#    header: True
#
#scooters:
#  type: pandas.SQLTableDataset
#  credentials: scooters_credentials
#  table_name: scooters
#  load_args:
#    index_col: ['name']
#    columns: ['name', 'gear']
#  save_args:
#    if_exists: 'replace'
#    # if_exists: 'fail'
#    # if_exists: 'append'
#
# The Data Catalog supports being able to reference the same file using two different Dataset implementations
# (transcoding), templating and a way to reuse arguments that are frequently repeated. See more here:
# https://docs.kedro.org/en/stable/data/data_catalog.html
#
# This is a data set used by the iris classification example pipeline provided with this starter
# template. Please feel free to remove it once you remove the example pipeline.

example_iris_data:
  type: spark.SparkDataset
  filepath: /dbfs/FileStore/kedro_project/data/01_raw/iris.csv
  file_format: csv
  load_args:
    header: True
    inferSchema: True
  save_args:
    header: True

## Unity Catalog tables are registered in the Spark Catalog or in terms of Databricks in the Unity Catalog.
## These tables utilize the custom UnityDataset class to interact with the Unity Catalog.
## This was chosen as most businesses have custom logic that they want to apply to their 
## data before it is used in a pipeline or before it is saved to a data store.
##
## To change the underlying load/save logic of the UnityDataset class, you can modify the
## `load` and `save` methods in the `kedro_project/datasets/unity_dataset.py` file.


X_train_unity:
  type: kedro_project.datasets.unity_dataset.UnityDataset
  #catalog: default
  database: default
  table: X_train

X_test_unity:
  type: kedro_project.datasets.unity_dataset.UnityDataset
  #catalog: default
  database: default
  table: X_test

y_train_unity:
  type: kedro_project.datasets.unity_dataset.UnityDataset
  #catalog: default
  database: default
  table: y_train

y_test_unity:
  type: kedro_project.datasets.unity_dataset.UnityDataset
  #catalog: default
  database: default
  table: y_test

y_pred_unity:
  type: kedro_project.datasets.unity_dataset.UnityDataset
  #catalog: default
  database: default
  table: y_pred

# We need to set mode to 'overwrite' in save_args so when saving the dataset it is replaced each time it is run
# for all SparkDatasets.
X_train@pyspark:
  type: spark.SparkDataset
  filepath: /dbfs/FileStore/kedro_project/data/02_intermediate/X_train.parquet
  save_args:
    mode: overwrite

X_train@pandas:
  type: pandas.ParquetDataset
  filepath: /dbfs/FileStore/kedro_project/data/02_intermediate/X_train.parquet

X_test@pyspark:
  type: spark.SparkDataset
  filepath: /dbfs/FileStore/kedro_project/data/02_intermediate/X_test.parquet
  save_args:
    mode: overwrite

X_test@pandas:
  type: pandas.ParquetDataset
  filepath: /dbfs/FileStore/kedro_project/data/02_intermediate/X_test.parquet

y_train@pyspark:
  type: spark.SparkDataset
  filepath: /dbfs/FileStore/kedro_project/data/02_intermediate/y_train.parquet
  save_args:
    mode: overwrite

y_train@pandas:
  type: pandas.ParquetDataset
  filepath: /dbfs/FileStore/kedro_project/data/02_intermediate/y_train.parquet

y_test@pyspark:
  type: spark.SparkDataset
  filepath: /dbfs/FileStore/kedro_project/data/02_intermediate/y_test.parquet
  save_args:
    mode: overwrite

y_test@pandas:
  type: pandas.ParquetDataset
  filepath: /dbfs/FileStore/kedro_project/data/02_intermediate/y_test.parquet

y_pred@pandas:
  type: pandas.ParquetDataset
  filepath: /dbfs/FileStore/kedro_project/data/03_primary/y_pred.parquet

# This is an example how to use `MemoryDataset` with Spark objects that aren't `DataFrame`'s.
# In particular, the `assign` copy mode ensures that the `MemoryDataset` will be assigned
# the Spark object itself, not a deepcopy version of it, since deepcopy doesn't work with
# Spark object generally.
example_classifier:
  type: MemoryDataset
  copy_mode: assign
